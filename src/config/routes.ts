/**
 * Configura√ß√£o centralizada de rotas da aplica√ß√£o
 * Este arquivo define todas as rotas dispon√≠veis no sistema
 */

export interface RouteConfig {
  path: string;
  label: string;
  icon?: string;
  description?: string;
  isProtected?: boolean;
  isVisible?: boolean;
}

export interface RouteGroup {
  title: string;
  routes: RouteConfig[];
}

// Configura√ß√£o das rotas principais
export const MAIN_ROUTES: RouteConfig[] = [
  {
    path: "/",
    label: "start",
    icon: "üè†",
    description: "P√°gina inicial da aplica√ß√£o",
    isVisible: true,
  },
  {
    path: "/recommended-games",
    label: "Search your game",
    icon: "üîç",
    description: "Busque e encontre jogos para voc√™",
    isVisible: true,
  },
];

// Configura√ß√£o de rotas por grupos (para futuras expans√µes)
export const ROUTE_GROUPS: RouteGroup[] = [
  {
    title: "Navega√ß√£o Principal",
    routes: MAIN_ROUTES,
  },
  // Exemplo de grupo futuro para jogos
  {
    title: "Jogos",
    routes: [
      {
        path: "/games",
        label: "Todos os Jogos",
        icon: "üéØ",
        description: "Explore todos os jogos dispon√≠veis",
        isVisible: false, // N√£o vis√≠vel ainda
      },
      {
        path: "/games/categories",
        label: "Categorias",
        icon: "üìÇ",
        description: "Jogos por categoria",
        isVisible: false,
      },
    ],
  },
  // Exemplo de grupo futuro para usu√°rio
  {
    title: "Usu√°rio",
    routes: [
      {
        path: "/profile",
        label: "Perfil",
        icon: "üë§",
        description: "Seu perfil de usu√°rio",
        isProtected: true,
        isVisible: false,
      },
      {
        path: "/favorites",
        label: "Favoritos",
        icon: "‚ù§Ô∏è",
        description: "Seus jogos favoritos",
        isProtected: true,
        isVisible: false,
      },
    ],
  },
];

// Fun√ß√£o utilit√°ria para obter todas as rotas vis√≠veis
export const getVisibleRoutes = (): RouteConfig[] => {
  return ROUTE_GROUPS
    .flatMap(group => group.routes)
    .filter(route => route.isVisible !== false);
};

// Fun√ß√£o para obter rotas por grupo
export const getRoutesByGroup = (groupTitle: string): RouteConfig[] => {
  const group = ROUTE_GROUPS.find(g => g.title === groupTitle);
  return group ? group.routes : [];
};

// Fun√ß√£o para verificar se uma rota existe
export const isRouteValid = (path: string): boolean => {
  return ROUTE_GROUPS
    .flatMap(group => group.routes)
    .some(route => route.path === path);
};

// Fun√ß√£o para obter configura√ß√£o de uma rota espec√≠fica
export const getRouteConfig = (path: string): RouteConfig | undefined => {
  return ROUTE_GROUPS
    .flatMap(group => group.routes)
    .find(route => route.path === path);
};

// Constantes para rotas espec√≠ficas (para evitar strings hardcoded)
export const ROUTES = {
  HOME: "/",
  RECOMMENDED_GAMES: "/recommended-games",
  GAMES: "/games",
  GAMES_CATEGORIES: "/games/categories",
  PROFILE: "/profile",
  FAVORITES: "/favorites",
} as const;

// Tipo para as chaves das rotas
export type RouteKey = keyof typeof ROUTES;
